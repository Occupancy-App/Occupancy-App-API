# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: occupancy-tracker
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  vpc:
    securityGroupIds:
      - sg-14d6b54c
    subnetIds:
      - subnet-a21758c5
      - subnet-525a107c
      - subnet-b6531bea

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "dynamodb:*"
    Resource: "*"
  - Effect: "Allow"
    Action:
      - "dax:*"
    Resource: "*"


#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  create_space:
    handler: handler.create_space
    events:
      - http:
          path: space/new/occupancy/current/{current_occupancy}/max/{max_occupancy}
          method: put
          cors: true
      - http:
          path: space/new/occupancy/current/{current_occupancy}/max/{max_occupancy}/name/{space_name}
          method: put
          cors: true

  get_occupancy:
    handler: handler.get_occupancy
    events:
      - http:
          path: space/{space_id}
          method: get
          cors: true

  increment:
    handler: handler.increment
    events:
      - http:
          path: space/{space_id}/increment
          method: put
          cors: true

  decrement: 
    handler: handler.decrement
    events:
      - http:
          path: space/{space_id}/decrement
          method: put
          cors: true

  max_occupancy_change:
    handler: handler.change_max_occupancy
    events:
      - http:
          path: space/{space_id}/max/{new_max_occupancy}
          method: put
          cors: true


#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
